import os, csv, json
from snakemake.utils import min_version

min_version("7.32.4")

configfile: "config/config.yml"

### helper functions

def revComplementary(seq):
    """ Returns the reverse complementary of a DNA sequence
        All IUPAC codes included
    """
    trans_dict = {"A":"T","C":"G","G":"C","T":"A",
                  "N":"N","R":"Y","Y":"R","S":"S",
                  "W":"W","K":"M","M":"K","B":"V",
                  "V":"B","D":"H","H":"D"}
    return "".join([trans_dict[nt] for nt in seq[::-1]])

def pathCreator(dir):
    """ Return a lambda function that joins paths with the specified dir
        Useful for not repeating paths all the time in rules
    """
    return lambda *args: os.path.join(dir, *args)

### create log dirs

logdirs = ["default",
          "all",
          "fastqc_before",
          "cutadapt",
          "fastqc_after",
          "multiqc",
          "create_manifest",
          "import_fastq",
          "itsxpress",
          "dada2",
          "plot_feature_table",
          "taxonomy",
          "filter_junk",
          "relative_filter",
          "extract_freq_values",
          "diversity",
          "alpha_group_sign",
          "beta_group_sign",
          "taxa_collapse",
          "abundance"]

for d in logdirs:
    os.makedirs(os.path.join("logs", d), exist_ok = True)

## directory variables and functions

proj_dir = os.path.join(config["outdir"], config["proj_name"])

fastqc_before_dir = pathCreator(os.path.join(proj_dir, "fastqc_before"))
cutadapt_dir = pathCreator(os.path.join(proj_dir, "reads_trimmed"))
cutadapt_logdir = pathCreator(os.path.join(proj_dir, "cutadapt_logs"))
fastqc_after_dir = pathCreator(os.path.join(proj_dir, "fastqc_after"))
multiqc_dir = pathCreator(os.path.join(proj_dir, "multiqc"))
qiime2_dir = pathCreator(os.path.join(proj_dir, "qiime2"))

## conda environment variables

code_dir = os.path.abspath(os.getcwd())
conda_env_dir = os.path.join(code_dir, "workflow", "envs")
conda_qc = os.path.join(conda_env_dir, "qc.yml")
conda_qiime2 = os.path.join(conda_env_dir, "qiime2-amplicon-2024.2-py38-linux-conda.yml")

### dry-run fixes (because in a dry-run, Snakemake will evaluate the params directive in the potentially non-existing input files)

def diversityGetDepth(feature_table, high_or_low):
  try:
    return json.load(open(qiime2_dir("sample_frequencies", "freqs.json")))["{}".format(feature_table)][high_or_low].replace(",", "").split('.')[0]
  except:
    return -1

## create outdir

os.makedirs(proj_dir, exist_ok = True)

## sample names

SAMPLES = list(set([s[:-len("_RX.fastq.gz")] for s in os.listdir(config["raw_data"])]))

## amplicon type, optional cutadapt rule handling

if config["type"] == "ITS":
  primers_tsv = "ITS_primers.tsv"
elif config["type"] == "16S":
  primers_tsv = "16S_primers.tsv"
  config["use_itsxpress"] = False

multiqc_input = list()
multiqc_input.append(expand(fastqc_before_dir("{sample}_" + config["r1_suf"] + "_fastqc.zip"), sample = SAMPLES))
multiqc_input.append(expand(fastqc_before_dir("{sample}_" + config["r2_suf"] + "_fastqc.zip"), sample = SAMPLES))

if config["use_cutadapt"] == True:
  qiime2_input_dir = cutadapt_dir()
  qiime2_input_seqs = expand(cutadapt_dir("{sample}_" + config["r1_suf"] + "_cutadapt.fastq.gz"), sample = SAMPLES)
  multiqc_template = os.path.join(code_dir, "config", "multiqc_template.yml")
  multiqc_input.append(expand(cutadapt_logdir("{sample}_cutadapt.log"), sample = SAMPLES))
  multiqc_input.append(expand(fastqc_after_dir("{sample}_" + config["r1_suf"] + "_cutadapt_fastqc.zip"), sample = SAMPLES))
  multiqc_input.append(expand(fastqc_after_dir("{sample}_" + config["r2_suf"] + "_cutadapt_fastqc.zip"), sample = SAMPLES))
  with open(os.path.join(code_dir, "resources", primers_tsv), mode = "r", newline = "") as file:
      primer_dict = {key: value for key, value in csv.reader(file, delimiter = "\t")}
  primer_seq_f = primer_dict.get(config["cutadapt_primer_f"], config["cutadapt_primer_f"])
  primer_seq_r = primer_dict.get(config["cutadapt_primer_r"], config["cutadapt_primer_r"])
else:
  qiime2_input_dir = config["raw_data"]
  qiime2_input_seqs = config["raw_data"] # technically not seqs, but input is not really used in create_manifest
  multiqc_template = os.path.join(code_dir, "config", "multiqc_no_cutadapt_template.yml")
  primer_seq_f = "A" # default values to avoid horrors
  primer_seq_r = "A"

## optional itsxpress rule handling

if config["use_itsxpress"] == True:
  dada2_input_seqs_qza = qiime2_dir("itsxpress", "its_seqs.qza")
else:
  dada2_input_seqs_qza = qiime2_dir("reads", "demux.qza")

## metadata columns

with open(config["metadata"], 'r', newline='') as f:
    META_COLS = next(csv.reader(f, delimiter = '\t'))[1:]

# abundance references

with open(config["abundance_file"], mode = 'r', newline = '') as f:
    reader = csv.reader(f, delimiter = '\t')
    _ = next(reader)
    DA_REFS = [f'{r[0]}_{r[1]}' for r in reader]

## levels for taxa collapse

COLLAPSED_TABLES = ["filtered",
                    *["level_" + l for l in config["abundance_collapse_levels"].split(";")]]

## methods for beta group significance

BGS_METHODS = [m for m in config["diversity_beta_group_sign_method"].split(";")]

## output handling

alloutput = list()
alloutput.append(multiqc_dir("multiqc_report.html"))
alloutput.append(qiime2_dir("feature_table_plots", "barplot.qzv"))
alloutput.append(qiime2_dir("group_significances", "observed_features_group_significance.qzv"))
alloutput.append(expand(qiime2_dir("group_significances", "{bgs_method}", "{meta_col}", "jaccard_group_significance.qzv"), meta_col = META_COLS, bgs_method = BGS_METHODS))
alloutput.append(expand(qiime2_dir("abundance", "{da_ref}", "{levels}_ancombc.qza"), da_ref = DA_REFS, levels = COLLAPSED_TABLES))
alloutput.append(qiime2_dir("feature_tables", "relative_filtered_table.qza"))


rule all:
    input:
        alloutput

### load rules

include: "rules/fastqc_before.smk"
include: "rules/cutadapt.smk"
include: "rules/fastqc_after.smk"
include: "rules/multiqc.smk"
include: "rules/create_manifest.smk"
include: "rules/import_fastq.smk"
include: "rules/itsxpress.smk"
include: "rules/dada2.smk"
include: "rules/taxonomy.smk"
include: "rules/filter_junk.smk"
include: "rules/relative_filter.smk"
include: "rules/plot_feature_table.smk"
include: "rules/extract_freq_values.smk"
include: "rules/diversity.smk"
include: "rules/alpha_group_sign.smk"
include: "rules/beta_group_sign.smk"
include: "rules/taxa_collapse.smk"
include: "rules/abundance.smk"